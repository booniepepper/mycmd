# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# ------------------------------------------------------------------------------
# MyCmd Base Shell Library
#   Library to be sourced with common routines for MyCmd scripts and commands

# ------------------------------------------------------------------------------
# Basic Housekeeping
#
# Set options for safety
set -o nounset -o errexit -o errtrace -o pipefail

# This file should only be sourced and not executed directly, so exit with error
# with execution is attempted. Technique borrowed from
# https://stackoverflow.com/a/28776166
(return 0 >/dev/null 2>&1) || {
	echo >&2 "$0 is a library only meant to be sourced."
	exit 1
}

# This library should only be sourced once. Technique borrowed from
# https://stackoverflow.com/a/64534652
[ -n "${_MYCMD_LIB-}" ] && return
readonly _MYCMD_LIB=1
export _MYCMD_LIB

readonly _MYCMD_LIB_SELF_FILE="${BASH_SOURCE[0]}"
export _MYCMD_LIB_SELF_FILE

[ -n "${MYCMD_SHELL_TRACE-}" ] && set -o xtrace

[ -n "${MYCMD_SHELL_VERBOSE-}" ] && set -o verbose

# ------------------------------------------------------------------------------
# Basic Logging and Output Functions
#
#   These are defined as early as possible to enable to be used through-out this
#   file. See the Additional Logging Support section below for additional
#   functionality.
#
#   In general, use these functions for any output that the user may see, and use
#   echo for interal implementation use for functions that are meant to be called
#   in sub-shells to capture output.

# mycmd.output
#   Convenience for runtime output to stdout. Provided for symmetry in output
#   functions.
function mycmd.output() {
	echo -e "$*"
}

# mycmd.log
#   Convenience for runtime logging to stderr.
function mycmd.log() {
	echo >&2 -e "$*"
}

# mycmd.debug
#   Optionally log when MYCMD_DEBUG is set. Useful for debugging output.
function mycmd.debug() {
	if [ -n "${MYCMD_DEBUG-}" ]; then
		mycmd.log "[DEBUG] $*"
	fi
}

# mycmd.trace
#   Optionally log when MYCMD_TRACE is set. Useful for tracing script execution.
function mycmd.trace() {
	if [ -n "${MYCMD_TRACE-}" ]; then
		mycmd.log "[TRACE] $*"
	fi
}

# mycmd.err_exit
#   Output an error message to stderr and exit with a non-zero exit code.
#
#   $1 - Exit code to use
#   Remainder - Error message
function mycmd.err_exit() {
	local -r exit_code=$1
	shift

	mycmd.log "$*"
	exit "${exit_code}"
}

# ------------------------------------------------------------------------------
# Set MYCMD_BASE_DIR
#
#   If not set, or set to a non-existent directory, fall back and set
#   MYCMD_BASE_DIR to the directory this file is in.
if [[ -z "${MYCMD_BASE_DIR-}" || ! -d "${MYCMD_BASE_DIR}" ]]; then
	MYCMD_BASE_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
	readonly MYCMD_BASE_DIR
	export MYCMD_BASE_DIR

	mycmd.trace "Setting MYCMD_BASE_DIR to: ${MYCMD_BASE_DIR}"
fi

# -------------------------------------------------------------------------------
# Library Deferred Commands Support
#
#   Commands to run after all libraries are sourced
declare -ax _MYCMD_DEFERRED_STARTUP=()

# mycmd._dispatch_with_calling_file
#   Higher order function that passes the full pathname of the shell file that called the
#   function that called  mycmd._dispatch_with_calling_file as the first parameter of the
#   function.
function _mycmd._dispatch_with_calling_file() {
	local -r fn=$1
	shift

	local calling_file
	# stack frame 0 - who called me
	# stack frame 1 - who called that
	read -r _ _ calling_file <<<"$(caller 1)"
	# TODO: Do I need to get an abspath?
	readonly calling_file
	mycmd.trace "Dispatching with calling file '${calling_file}'"

	"${fn}" "${calling_file}" "${@}"
}

function _mycmd._defer_at_startup() {
	local -r calling_file=$1
	shift

	_MYCMD_DEFERRED_STARTUP+=("${calling_file} $*")
}

# mycmd.defer_at_startup
#  Called with a command to call at the end of evaluating the library.
#
#  These commands are explicitly called by the explicit call to
#  _mycmd.run_startup_deferreds at the end of this file.
function mycmd.defer_at_startup() {
	_mycmd._dispatch_with_calling_file _mycmd._defer_at_startup "${@}"
}

# _mycmd.run_startup_deferreds
#   Supports two calling mechanism: one by the library explicitly, like from
#   this file. Or another on behalf of another file.
#
#   A quirk of how mycmd._dispatch_with_calling_file works allows us to be
#   recursive here
# shellcheck disable=SC2120
function _mycmd.run_startup_deferreds() {
	if (($# < 1)); then
		_mycmd._dispatch_with_calling_file "${FUNCNAME[0]}"
		return $?
	fi

	local -r calling_file=$1

	local -ri deferred_startup_count="${#_MYCMD_DEFERRED_STARTUP[@]}"
	local -i i
	for ((i = 0; i < deferred_startup_count; i++)); do
		local calling_file_and_command
		calling_file_and_command="${_MYCMD_DEFERRED_STARTUP[i]}"

		if [[ "${calling_file_and_command}" =~ ^"${calling_file}".* ]]; then
			local command="${calling_file_and_command##$calling_file }"
			mycmd.trace "Executing '${command}' from '${calling_file_and_command}'."
			${command}
			mycmd.trace "Removing executed '${command}' from '${calling_file_and_command}'."
			unset -v '_MYCMD_DEFERRED_STARTUP[$i]'
		else
			mycmd.trace "Skipping '${calling_file_and_command}'."
		fi
	done

	return 0
}

# -------------------------------------------------------------------------------
# Library clean commands support
#   Basic clean up and error handling commands

# _MYCMD_DEFERRED_AT_EXIT
#   A list treated as a stack. Functions are provided below for adding commands to this
#   to be run at script exit.
declare -ax _MYCMD_DEFERRED_AT_EXIT=()

function mycmd.defer_at_exit() {
	_MYCMD_DEFERRED_AT_EXIT+=("$@")
}

function _mycmd._print_stack_trace() {
	mycmd.trace "Running ${FUNCNAME[0]}, with args '$*'"

	# Disable the trap
	trap - ERR

	# Method borrowed from https://raimonster.com/scripting-field-guide/#org3417a0c
	local return_code=$1

	((return_code == 0)) && return 0

	mycmd.log "\nThe command ${BASH_COMMAND} triggered a stack trace."

	local -i i
	local -i j

	for i in $(seq 1 $((${#FUNCNAME[@]} - 2))); do
		j=$((i + 1))
		mycmd.log "\t ${BASH_SOURCE[$i]}: ${FUNCNAME[$i]}() called in ${BASH_SOURCE[$j]}:${BASH_LINENO[$i]}"
	done
}

function _mycmd._run_at_exit_deferreds() {
	mycmd.trace "Running ${FUNCNAME[0]}."

	# Disable the trap handler, including ERR here just in case, as this should be run last
	trap - SIGINT SIGTERM ERR EXIT

	# Defensive programming in the unlikely state our variable isn't set
	if [[ ! -v _MYCMD_DEFERRED_AT_EXIT ]]; then
		mycmd.debug "_MYCMD_DEFERRED_AT_EXIT is empty or doesn't exist, skipping clean up."
		return
	fi

	# Then, run all of the exit deferreds in reverse order
	local -ri deferred_at_exit_count="${#_MYCMD_DEFERRED_AT_EXIT[@]}"
	local -i i
	for ((i = deferred_at_exit_count - 1; i >= 0; i--)); do
		local command="${_MYCMD_DEFERRED_AT_EXIT[i]}"
		mycmd.trace "Executing deferred at exit '${command}'."
		${command}
	done

	unset -v _MYCMD_DEFERRED_AT_EXIT

	mycmd.trace "All at exit deferreds execution completed."
}

trap '_mycmd._print_stack_trace $?' ERR
trap _mycmd._run_at_exit_deferreds SIGINT SIGTERM EXIT

# -------------------------------------------------------------------------------
# MyCmd Operation System Support
#   Common variables set according to OS being run on.
_MYCMD_OS="$(uname -s)"
readonly _MYCMD_OS

case ${_MYCMD_OS} in
	Darwin)
		# https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html#//apple_ref/doc/uid/TP40010672-CH10-SW1
		MYCMD_CACHE_DIR=$HOME/Library/Caches/mycmd
		;;

	Linux)
		MYCMD_CACHE_DIR=$HOME/.cache/mycmd
		;;

	*)
		mycmd.err_exit 1 "OS ${_MYCMD_OS} is not currently supported."
		;;
esac

readonly MYCMD_CACHE_DIR
mycmd.trace "Creating cache directory ${MYCMD_CACHE_DIR} if needed."
mkdir -p "${MYCMD_CACHE_DIR}"

# ------------------------------------------------------------------------------
# Convenience methods for calling functions

# mycmd.function_exists
#   Test whether the specified shell function has been defined
function mycmd.function_exists() {
	declare -F "$1" >/dev/null
}

# mycmd.call_if_function_exists
#  	If the named function exists, call with the subsequent arguments. Otherwise,
#  	do nothing.
function mycmd.call_if_function_exists() {
	local -r fn=$1
	shift

	if mycmd.function_exists "${fn}"; then
		"${fn}" "$@"
	fi
}

# ------------------------------------------------------------------------------
# Convenience methods for locating common utilities cross platform

# MYCMD_BIN
#   An exported associative array used for dependencies that are in different
#   locations and/or names depending on the platform or host a script is
#   being run on.
#
#     Keys:  command names
#     Value: the path of the given command
declare -Ax MYCMD_BIN

# _mycmd._locate_bin
#   Attempt to find the given command on the PATH. If found, return the full path.
function _mycmd._locate_bin() {
	local -r command=$1
	local command_path

	if command_path=$(which "${command}" 2>/dev/null); then
		echo "${command_path}"
	else
		return 1
	fi
}

# mycmd.init_bin
#  If not already set, attempt to set MYCMD_BIN for the given command name. Will
#  first call mycmd_local.init_bin, if the user has defined mycmd-local-lib, and
#  use the value from there as an override.
#
#  Common commands like sed, which require a different name if using GNU set installed
#  from HomeBrew on Mac OS, are included here.
#
#  It is intended that when this function is callled, the command is a required
#  dependency and thus this will exit with an error if the command cannot be found.
function mycmd.init_bin() {
	local -r command=$1

	mycmd.call_if_function_exists mycmd_local.init_bin "$@"

	[[ -v MYCMD_BIN["$command"] ]] && {
		mycmd.debug "'${command}' already defined at '${MYCMD_BIN[$command]}'"
		return 0
	}

	local command_path

	case "${command}+${_MYCMD_OS}" in
		"sed+Darwin")
			local sed_path
			if sed_path=$(_mycmd._locate_bin gsed); then
				MYCMD_BIN[$command]="${sed_path}"
			else
				mycmd.err_exit 1 "Unable to locate GNU sed, please install from Homebrew with 'brew install gnu-sed'"
			fi
			;;
		"sha1sum+Darwin")
			local shasum_path
			# shasum is the implementation that ships with mac OS. SHA1 is the default algorithm so it is
			# a drop in for most cases
			if shasum_path=$(_mycmd._locate_bin shasum); then
				MYCMD_BIN[$command]="${shasum_path}"
			else
				mycmd.err_exit 1 "Unable to locate shasum"
			fi
			;;
		*)
			if command_path=$(_mycmd._locate_bin "${command}"); then
				MYCMD_BIN[$command]="${command_path}"
			else
				mycmd.err_exit 1 "Unable to locate path for '${command}'."
			fi
			;;

	esac
}

# ------------------------------------------------------------------------------
# MyCmd Sourcing Support

# _mycmd.source_mycmd_lib
#   Explicitly source a MyCmd library and its dependencies by providing the
#   directory name of the MyCmd library relative to the MYCMD_BASE_DIR.
#
#   For example, to source the library in ~/mycmd/requests/service1, call this
#   like this:
#
# 	mycmd.source_mycmd_lib "requests/service1"
function mycmd.source_mycmd_lib() {
	# TODO: Validation of parmaeters
	local -r library_path="$1"

	local dir_parts
	# shellcheck disable=SC2162
	IFS="/" read -a dir_parts <<<"${library_path}"
	readonly dir_parts

	# Start at the base directory
	local lib_dir="${MYCMD_BASE_DIR}"
	local dir
	for dir in "${dir_parts[@]}"; do
		lib_dir="${lib_dir}/${dir}"

		# Look for a script named <dirname>-lib in <dirname>
		local lib_script="${lib_dir}/${dir}-lib"

		if [[ -e "${lib_script}" ]]; then
			# shellcheck source=/dev/null
			source "${lib_script}"

			# Run any remaining deferreds for the startup
			_mycmd.run_startup_deferreds "${lib_script}"
		fi
	done
}

function _mycmd.running_cmd_name() {
	local -r running_cmd="${BASH_SOURCE[-1]}"

	basename "${running_cmd}"
}

function _mycmd.running_cmd_relative_path() {
	local -r running_cmd_dir="$(dirname "${BASH_SOURCE[-1]}")"

	# TODO: Dependency on `realpath` from GNU coreutils
	local -r relative_path="$(realpath --relative-to="${MYCMD_BASE_DIR}" "${running_cmd_dir}")"

	echo "${relative_path}"
}

# mycmd.auto_source_mycmd_libs
#   Walks the MyCmd directory hierarchy starting from the direct child of MYCMD_BASE_DIR
#   down to the directory the calling command script is in and sources the library file
#   <directory_name>-lib if it exists
function mycmd.auto_source_mycmd_libs() {
	local -r relative_path=$(_mycmd.running_cmd_relative_path)

	# TODO Properly error on things outside of MYCMD_BASE_DIR
	if [[ "${relative_path}" == "." ]]; then
		mycmd.trace "No additional libraries to automatically source, command is in ${MYCMD_BASE_DIR}."
		return
	fi

	# TODO: Validate that running_cmd_dir is a child path of MYCMD_BASE_DIR
	mycmd.source_mycmd_lib "${relative_path}"
}

function _mycmd.source_local_override() {
	local -r local_lib="${MYCMD_BASE_DIR}/mycmd-local-lib"

	# shellcheck source=/dev/null
	[[ -e "${local_lib}" ]] && source "${local_lib}"
}

# ------------------------------------------------------------------------------
# Convenience methods and variables for terminal output
#
#   Users set the environment variabled MYCMD_FORCE_COLOR to force MyCmd to
#   output in color if output is being redirected.
#
#   The associative arrays MYCMD_FG_COLOR, MYCMD_BG_COLOR, and MYCMD_TEXT_ATTR
#   are provided as conveniences for the terminal escape codes for common
#   terminal foreground colors, background colors, and text attributes,
#   respectively. In each case, the keys are the names of the colors or
#   attributes.
#
#   Examples:
#     - Display the given text in bold:
#       mycmd.output "${MYCMD_TEXT_ATTR[bold]}This is bold${MYCMD_TEXT_ATTR[reset]}"
#     - Display the given text with a blue background and magenta text:
#       mycmd.output "${MYCMD_BG_COLOR[blue]}${MYCMD_FG_COLOR[magenta]}This is bold${MYCMD_FG_COLOR[default]}${MYCMD_BG_COLOR[default]}"
#
#    Note that you generally need to either set thing back to default for colors or reset for text attributes when you are finished.
#
#   Handy reference: https://wiki.bash-hackers.org/scripting/terminalcodes
# TODO: Check for terminal capabilities?
if [[ -t 1 || -n "${MYCMD_FORCE_COLOR-}" ]]; then
	readonly _MYCMD_IS_TTY=1
	mycmd.init_bin tput
fi

# tput
#   Simple function wrapper around the tput command that is a no-op
#   if we aren't running from a terminal.
function tput() {
	if [[ -n "${_MYCMD_IS_TTY-}" ]]; then
		"${MYCMD_BIN[tput]}" "$@"
	else
		# Do Nothing
		return 0
	fi
}

# MYCMD_FG_COLOR
#   An exported associative array with common foreground color definitions.
#
#   Provided colors:
#   - black
#   - red
#   - green
#   - yellow
#   - blue
#   - magenta
#   - cyan
#   - white
declare -Ax MYCMD_FG_COLOR
function _mycmd.define_fg_colors() {
	MYCMD_FG_COLOR[black]=$(tput setaf 0)
	MYCMD_FG_COLOR[red]=$(tput setaf 1)
	MYCMD_FG_COLOR[green]=$(tput setaf 2)
	MYCMD_FG_COLOR[yellow]=$(tput setaf 3)
	MYCMD_FG_COLOR[blue]=$(tput setaf 4)
	MYCMD_FG_COLOR[magenta]=$(tput setaf 5)
	MYCMD_FG_COLOR[cyan]=$(tput setaf 6)
	MYCMD_FG_COLOR[white]=$(tput setaf 7)
	# MYCMD_FG_COLOR[default]=$(tput setaf 9)
}
mycmd.defer_at_startup _mycmd.define_fg_colors

# MYCMD_FG_COLOR
#   An exported associative array with common foreground color definitions.
#
#   Provided colors:
#   - black
#   - red
#   - green
#   - yellow
#   - blue
#   - magenta
#   - cyan
#   - white
declare -Ax MYCMD_BG_COLOR
function _mycmd.define_bg_colors() {
	MYCMD_BG_COLOR[black]=$(tput setab 0)
	MYCMD_BG_COLOR[red]=$(tput setab 1)
	MYCMD_BG_COLOR[green]=$(tput setab 2)
	MYCMD_BG_COLOR[yellow]=$(tput setab 3)
	MYCMD_BG_COLOR[blue]=$(tput setab 4)
	MYCMD_BG_COLOR[magenta]=$(tput setab 5)
	MYCMD_BG_COLOR[cyan]=$(tput setab 6)
	MYCMD_BG_COLOR[white]=$(tput setab 7)
	# MYCMD_BG_COLOR[default]=$(tput setab 9)
}
mycmd.defer_at_startup _mycmd.define_bg_colors

# MYCMD_FG_COLOR
#   An exported associative array with common text attributes.
#
#   Provided attributes include:
#   - reset -- resets all attributes (including colors) to the defaults
#   - bold
#   - dim
#   - start_standout
#   - end_standout
#   - start_under - start underline
#   - end_under - end underline
declare -A MYCMD_TEXT_ATTR
function _mycmd.define_text_attrs() {
	MYCMD_TEXT_ATTR[reset]=$(tput sgr0)
	MYCMD_TEXT_ATTR[bold]=$(tput bold)
	MYCMD_TEXT_ATTR[dim]=$(tput dim)
	MYCMD_TEXT_ATTR[start_standout]=$(tput smso)
	MYCMD_TEXT_ATTR[end_standout]=$(tput rmso)
	MYCMD_TEXT_ATTR[start_under]=$(tput smul)
	MYCMD_TEXT_ATTR[end_under]=$(tput rmul)
}
mycmd.defer_at_startup _mycmd.define_text_attrs

# ------------------------------------------------------------------------------
# Additional Logging Support Functions

mycmd.defer_at_startup mycmd.init_bin sed
function mycmd._log_input() {
	local fn=$1

	mycmd.log "${MYCMD_TEXT_ATTR[bold]}Start of input to '${fn}' on STDIN:${MYCMD_TEXT_ATTR[reset]}"

	cat - | "${MYCMD_BIN[sed]}" -e "s/\(.*\)/${MYCMD_TEXT_ATTR[bold]}INPUT:${MYCMD_TEXT_ATTR[reset]}\t \1/" >&2

	mycmd.log "\n${MYCMD_TEXT_ATTR[bold]}End of input to '${fn}' on STDIN.${MYCMD_TEXT_ATTR[reset]}"
}

mycmd.defer_at_startup mycmd.init_bin sed
function mycmd._log_output() {
	local fn=$1

	mycmd.log "${MYCMD_TEXT_ATTR[bold]}Start of output from '${fn}' on STDOUT:${MYCMD_TEXT_ATTR[reset]}"

	cat - | "${MYCMD_BIN[sed]}" -e "s/\(.*\)/${MYCMD_TEXT_ATTR[bold]}OUTPUT:${MYCMD_TEXT_ATTR[reset]}\t \1/" >&2

	mycmd.log "\n${MYCMD_TEXT_ATTR[bold]}End of output from '${fn}' on STDOUT.${MYCMD_TEXT_ATTR[reset]}"
}

# mycmd.log_function
#   Used to easily trace execution of a shell script.
#   Logs - by default to stderr - the following:
#   - any arguments used to call the function
#   - any input on stdin to the function
#   - any output on stderr from the function
function mycmd.log_function() {
	local -r fn=$1
	shift

	if [ -n "${MYCMD_DEBUG-}" ]; then
		mycmd.log "${MYCMD_TEXT_ATTR[bold]}Calling function '${fn}':${MYCMD_TEXT_ATTR[reset]}"

		if (($# > 0)); then
			for ((i = 1; i <= "$#"; i++)); do
				mycmd.log "\targument ${i}: ${!i}"
			done
		fi

		cat - |
			tee >(mycmd._log_input "${fn}") |
			$fn "$@" |
			tee >(mycmd._log_output "${fn}")
	else
		$fn "$@"
	fi
}

# ------------------------------------------------------------------------------
# Functions for managing caches and temporary files

# mycmd.get_named_cache_file
#   Returns the path name of a file to use for caching from a common cache directory.
#
#   These files are used for caching state in between runs of commands.
function mycmd.get_named_cache_file() {
	if (($# < 1)); then
		mycmd.log "Missing required parameter CACHE_FILE_NAME to mycmd.get_named_cache_file."
		return 1
	fi

	local -r cache_file_name=$1
	local -r running_cmd_relative_path=$(_mycmd.running_cmd_relative_path)
	local -r running_cmd_name=$(_mycmd.running_cmd_name)

	local cmd_base_cache_dir
	cmd_base_cache_dir="${MYCMD_CACHE_DIR}/${running_cmd_relative_path}/${running_cmd_name}"
	cmd_base_cache_dir="$(realpath -m "${cmd_base_cache_dir}")"
	readonly cmd_base_cache_dir

	# TODO: Do we want to change the permissions on the cache directory?
	mkdir -p "${cmd_base_cache_dir}"

	local named_cache_file
	named_cache_file="${cmd_base_cache_dir}/${cache_file_name}"
	named_cache_file="$(realpath -m "${named_cache_file}")"
	readonly named_cache_file

	echo "${named_cache_file}"
}

# Source the local overrides library if it exists
_mycmd.source_local_override

# Run any deferred commands
_mycmd.run_startup_deferreds

mycmd.trace "$0 sourcing complete."
